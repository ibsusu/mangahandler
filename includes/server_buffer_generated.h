// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERBUFFER_DIOGENES_GENERAL_H_
#define FLATBUFFERS_GENERATED_SERVERBUFFER_DIOGENES_GENERAL_H_

#include "flatbuffers/flatbuffers.h"

namespace diogenes {
namespace general {

struct SB;

struct SB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CID = 4,
    VT_RID = 6,
    VT_T1 = 8,
    VT_T2 = 10,
    VT_OBM = 12,
    VT_YN = 14
  };
  uint64_t cid() const {
    return GetField<uint64_t>(VT_CID, 0);
  }
  uint64_t rid() const {
    return GetField<uint64_t>(VT_RID, 0);
  }
  const flatbuffers::String *t1() const {
    return GetPointer<const flatbuffers::String *>(VT_T1);
  }
  const flatbuffers::String *t2() const {
    return GetPointer<const flatbuffers::String *>(VT_T2);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *obm() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_OBM);
  }
  bool yn() const {
    return GetField<uint8_t>(VT_YN, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_CID) &&
           VerifyField<uint64_t>(verifier, VT_RID) &&
           VerifyOffset(verifier, VT_T1) &&
           verifier.Verify(t1()) &&
           VerifyOffset(verifier, VT_T2) &&
           verifier.Verify(t2()) &&
           VerifyOffset(verifier, VT_OBM) &&
           verifier.Verify(obm()) &&
           verifier.VerifyVectorOfStrings(obm()) &&
           VerifyField<uint8_t>(verifier, VT_YN) &&
           verifier.EndTable();
  }
};

struct SBBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_cid(uint64_t cid) {
    fbb_.AddElement<uint64_t>(SB::VT_CID, cid, 0);
  }
  void add_rid(uint64_t rid) {
    fbb_.AddElement<uint64_t>(SB::VT_RID, rid, 0);
  }
  void add_t1(flatbuffers::Offset<flatbuffers::String> t1) {
    fbb_.AddOffset(SB::VT_T1, t1);
  }
  void add_t2(flatbuffers::Offset<flatbuffers::String> t2) {
    fbb_.AddOffset(SB::VT_T2, t2);
  }
  void add_obm(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> obm) {
    fbb_.AddOffset(SB::VT_OBM, obm);
  }
  void add_yn(bool yn) {
    fbb_.AddElement<uint8_t>(SB::VT_YN, static_cast<uint8_t>(yn), 0);
  }
  explicit SBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SBBuilder &operator=(const SBBuilder &);
  flatbuffers::Offset<SB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SB>(end);
    return o;
  }
};

inline flatbuffers::Offset<SB> CreateSB(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t cid = 0,
    uint64_t rid = 0,
    flatbuffers::Offset<flatbuffers::String> t1 = 0,
    flatbuffers::Offset<flatbuffers::String> t2 = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> obm = 0,
    bool yn = false) {
  SBBuilder builder_(_fbb);
  builder_.add_rid(rid);
  builder_.add_cid(cid);
  builder_.add_obm(obm);
  builder_.add_t2(t2);
  builder_.add_t1(t1);
  builder_.add_yn(yn);
  return builder_.Finish();
}

inline flatbuffers::Offset<SB> CreateSBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t cid = 0,
    uint64_t rid = 0,
    const char *t1 = nullptr,
    const char *t2 = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *obm = nullptr,
    bool yn = false) {
  return diogenes::general::CreateSB(
      _fbb,
      cid,
      rid,
      t1 ? _fbb.CreateString(t1) : 0,
      t2 ? _fbb.CreateString(t2) : 0,
      obm ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*obm) : 0,
      yn);
}

inline const diogenes::general::SB *GetSB(const void *buf) {
  return flatbuffers::GetRoot<diogenes::general::SB>(buf);
}

inline bool VerifySBBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<diogenes::general::SB>(nullptr);
}

inline void FinishSBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<diogenes::general::SB> root) {
  fbb.Finish(root);
}

}  // namespace general
}  // namespace diogenes

#endif  // FLATBUFFERS_GENERATED_SERVERBUFFER_DIOGENES_GENERAL_H_
